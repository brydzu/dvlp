#!/usr/bin/env node

process.env.NODE_NO_WARNINGS = '1';

const { server } = require('../index');
const program = require('commander');
const pkg = require('../package.json');

const envTranspile = process.env.TRANSPILE;
const transpile = envTranspile && (envTranspile !== '0' || envTranspile !== 'false');

program
  .usage('[options] [path...]')
  .description(
    'Start a development server, restarting and reloading connected browsers on file changes. \n  Serves static files from one or more "path" directories, or a custom application \n  server if "path" is a single file'
  )
  .option('-p, --port <port>', 'port number', parseInt)
  .option('-r, --rollup-config <path>', 'path to optional Rollup.js config')
  .option('--no-reload', 'disable reloading connected browsers on file change')
  .arguments('[path...]')
  .action(boot)
  .version(pkg.version, '-v, --version');

if (transpile) {
  program.option('-t, --transpiler <path>', 'path to optional transpiler');
}

program.parse(process.argv);

if (!program.args.length) {
  boot([process.cwd()]);
}

async function boot(path) {
  try {
    await server(path.length > 1 ? path : path[0], {
      port: program.port,
      reload: program.reload,
      rollupConfig: program.rollupConfig,
      transpiler: program.transpiler
    });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}
